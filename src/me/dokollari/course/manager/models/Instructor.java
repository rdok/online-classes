/*******************************************************************************
 *  The MIT License
 *   
 *  Copyright (c) 2014 Rizart Dokollari.
 *  
 *  Permission is hereby granted, free of charge, to any person
 *  obtaining a copy of this software and associated documentation
 *  files (the "Software"), to deal in the Software without
 *  restriction, including without limitation the rights to use,
 *  copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following
 *  conditions:
 *  
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
package me.dokollari.course.manager.models;

import java.io.Serializable;


/** @author Rizart Dokollari
 * @since November, 2012
 */

public class Instructor extends Person implements Serializable {
    @SuppressWarnings("compatibility:-8580673596708373092")
    private static final long serialVersionUID = 1176750091803057767L;

    /**
     * Used when data is taken form database. id is autogenerated from database.
     * @param lastName
     * @param firstName
     * @param id
     * @throws Exception
     */
    public Instructor(String lastName, String firstName, int id) throws Exception {
        super(lastName, firstName, id);
    }

    /**
     *  Used before adding to database.
     * @param lastName
     * @param firstName
     */
    public Instructor(String lastName, String firstName) throws Exception {
        super(lastName, firstName);
    }

    @Override
    public String toString() {
        return String.format("Prof. %-20s  %-20s %10d", getLastName(), getFirstName(), getId());
    }


    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof me.dokollari.course.manager.models.Instructor)) {
            return false;
        }
        final me.dokollari.course.manager.models.Instructor other =
            (me.dokollari.course.manager.models.Instructor) object;
        if (!(getLastName() == null ? other.getLastName() == null : getLastName().equals(other.getLastName()))) {
            return false;
        }
        if (!(getFirstName() == null ? other.getFirstName() == null : getFirstName().equals(other.getFirstName()))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int PRIME = 37;
        int result = 1;
        result = PRIME * result + ((getLastName() == null) ? 0 : getLastName().hashCode());
        result = PRIME * result + ((getFirstName() == null) ? 0 : getFirstName().hashCode());
        return result;
    }
}

