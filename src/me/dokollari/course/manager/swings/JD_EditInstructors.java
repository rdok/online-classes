/*******************************************************************************
 *  The MIT License
 *   
 *  Copyright (c) 2014 Rizart Dokollari.
 *  
 *  Permission is hereby granted, free of charge, to any person
 *  obtaining a copy of this software and associated documentation
 *  files (the "Software"), to deal in the Software without
 *  restriction, including without limitation the rights to use,
 *  copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following
 *  conditions:
 *  
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
package me.dokollari.course.manager.swings;

import java.awt.Font;
import java.awt.Frame;

import java.sql.SQLException;

import javax.swing.JTextField;

import me.dokollari.course.manager.Controller;
import me.dokollari.course.manager.DB;
import me.dokollari.course.manager.Verify;


/**
 *
 * @author Rizart Dokollari
 */
public class JD_EditInstructors extends javax.swing.JDialog {
    private Controller controller;
    private final String FIRST_NAME_REQ = "First Name (required)";
    private final String LAST_NAME_REQ = "Last Name (required)";
    private final String PHONE = "Phone";
    private final String EMAIL = "Email";
    private final String ID = "Enter Instructor's ID";

    /** Creates new form JD_EditInstructors */
    public JD_EditInstructors(java.awt.Frame parent, boolean modal, Controller controller) {
        super(parent, modal);
        this.controller = controller;
        initComponents();
        initFinalCompon(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTF_firstName = new javax.swing.JTextField();
        jTF_lastName = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jB_register = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTA_dbMessages = new javax.swing.JTextArea();
        jB_back = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jCB_sort = new javax.swing.JComboBox();
        jCBreversSort = new javax.swing.JCheckBox();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jTF_instructorsID = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jL_dbMessages = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        jPanel2.setBackground(new java.awt.Color(0, 204, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add New Instructor"));

        jTF_firstName.setForeground(new java.awt.Color(204, 204, 204));
        jTF_firstName.setText(FIRST_NAME_REQ);
        jTF_firstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTF_firstNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_firstNameFocusLost(evt);
            }
        });

        jTF_lastName.setForeground(new java.awt.Color(204, 204, 204));
        jTF_lastName.setText(LAST_NAME_REQ);
        jTF_lastName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTF_lastNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_lastNameFocusLost(evt);
            }
        });

        jTextField3.setForeground(new java.awt.Color(204, 204, 204));
        jTextField3.setText(PHONE);

        jTextField4.setForeground(new java.awt.Color(204, 204, 204));
        jTextField4.setText(EMAIL);

        jB_register.setBackground(new java.awt.Color(153, 255, 153));
        jB_register.setText("Register");
        jB_register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_registerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jB_register)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTF_lastName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTF_firstName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTF_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jTF_lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jB_register)
                .addGap(20, 20, 20))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Instructors on database"));

        jTA_dbMessages.setColumns(20);
        jTA_dbMessages.setRows(5);
        jTA_dbMessages.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane1.setViewportView(jTA_dbMessages);

        jB_back.setText("Back");
        jB_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_backActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Sort by"));

        jCB_sort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Last Name", "ID", "First Name" }));
        jCB_sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_sortActionPerformed(evt);
            }
        });

        jCBreversSort.setText("Reversed");
        jCBreversSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBreversSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCB_sort, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCBreversSort)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCB_sort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBreversSort))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 153, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Remove Instructor"));
        jPanel3.setPreferredSize(new java.awt.Dimension(267, 223));

        jTF_instructorsID.setText(ID);
        jTF_instructorsID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTF_instructorsIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_instructorsIDFocusLost(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jTF_instructorsID, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jTF_instructorsID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jL_dbMessages.setText("System:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 30, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)))
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jB_back)
                        .addGap(33, 33, 33)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(jL_dbMessages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jB_back)
                        .addComponent(jL_dbMessages))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void jB_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_backActionPerformed
        this.dispose();
    }//GEN-LAST:event_jB_backActionPerformed

    private void jB_registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_registerActionPerformed
        String lastName = jTF_lastName.getText();
        String firstName = jTF_firstName.getText();

        try {
            controller.addInstructor(lastName, firstName, jL_dbMessages);
            reset_jTF_firstName();
            reset_jTF_lasttName();
            fetchInstructorsData();
        } catch (Exception e) {
            showErrorMessage(e);
        }        
    }//GEN-LAST:event_jB_registerActionPerformed

    private void jTF_firstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_firstNameFocusGained
        resetTextFieldGainFocus(jTF_firstName);
    }//GEN-LAST:event_jTF_firstNameFocusGained

    private void jTF_firstNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_firstNameFocusLost
        String text = jTF_firstName.getText();

        if (text.equals("")) {
            reset_jTF_firstName();
        } else {
            resetTextFieldLoseFocus(jTF_firstName);
        } // end else
    }//GEN-LAST:event_jTF_firstNameFocusLost

    private void jTF_lastNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_lastNameFocusGained
        resetTextFieldGainFocus(jTF_lastName);
    }//GEN-LAST:event_jTF_lastNameFocusGained

    private void jTF_lastNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_lastNameFocusLost
        String text = jTF_lastName.getText();

        if (text.equals("")) {
            reset_jTF_lasttName();
        } else {
            resetTextFieldLoseFocus(jTF_lastName);
        } // end else
    }//GEN-LAST:event_jTF_lastNameFocusLost

    private void jTF_instructorsIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_instructorsIDFocusGained
        resetTextFieldGainFocus(jTF_instructorsID);
    }//GEN-LAST:event_jTF_instructorsIDFocusGained

    private void jTF_instructorsIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_instructorsIDFocusLost
        resetTextFieldLoseFocus(jTF_instructorsID);
    }//GEN-LAST:event_jTF_instructorsIDFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            controller.removeInstructor(jTF_instructorsID, jL_dbMessages);
            fetchInstructorsData();
        } catch (SQLException e) {
            jL_dbMessages.setText(e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCB_sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_sortActionPerformed
       
        //JComboBox jCB_sort = (JComboBox) evt.getSource();
        updateListingInstructtors();
        //updateLabel(petName);
    }//GEN-LAST:event_jCB_sortActionPerformed

    private void jCBreversSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBreversSortActionPerformed
        updateListingInstructtors();
    }//GEN-LAST:event_jCBreversSortActionPerformed

    private void initFinalCompon(Frame parent) {
        jB_back.requestFocus(); // request focus to this button.
        this.setLocationRelativeTo(parent);
        fetchInstructorsData();

        this.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_back;
    private javax.swing.JButton jB_register;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCB_sort;
    private javax.swing.JCheckBox jCBreversSort;
    private javax.swing.JLabel jL_dbMessages;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTA_dbMessages;
    private javax.swing.JTextField jTF_firstName;
    private javax.swing.JTextField jTF_instructorsID;
    private javax.swing.JTextField jTF_lastName;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables


    /**
     * when given field gains focus clears textfield for user to enter text
     * @param jTF_field
     */
    private void resetTextFieldGainFocus(JTextField jTF_field) {
        if (jTF_field.getText().equals(FIRST_NAME_REQ) || jTF_field.getText().equals(LAST_NAME_REQ) ||
            jTF_field.getText().equals(Verify.NAME_REQ) || jTF_field.getText().equals(ID) ||
            jTF_field.getText().equals(Verify.ID_REQ)) {
            jTF_field.setText("");
        } // end if
        jTF_field.setForeground(new java.awt.Color(51, 51, 51)); // grey/default
    } // end method resetTextFieldGainFocus

    /**
     * when given jtextfield loses focus checks if given variable is proper (alphabetical 1-45 lentth)
     * @param jTF_field
     */
    private void resetTextFieldLoseFocus(JTextField jTF_field) {
        String name = jTF_field.getText();

        try {
            if (jTF_field.equals(jTF_firstName) || jTF_field.equals(jTF_lastName)) {
                Verify.checkName(name);
            } else if (jTF_field.equals(jTF_instructorsID)) {
                Verify.checkID(name);
            } // end else if


            jTF_field.setForeground(new java.awt.Color(0, 153, 51)); // green/correct
            jTF_field.setBackground(new java.awt.Color(153, 255, 153));

        } catch (Exception e) {
            jTF_field.setText(e.getMessage());
            jTF_field.setForeground(new java.awt.Color(255, 0, 0)); // red/error
        } // end ttry
    } // end method resetTextFieldLoseFocus

    private void reset_jTF_firstName() {
        jTF_firstName.setText(FIRST_NAME_REQ);
        jTF_firstName.setBackground(new java.awt.Color(255, 255, 255));
        jTF_firstName.setForeground(new java.awt.Color(204, 204, 204)); // grey/default
    } // end method reset_jTF_firstName

    private void reset_jTF_lasttName() {
        jTF_lastName.setText(LAST_NAME_REQ);
        jTF_lastName.setBackground(new java.awt.Color(255, 255, 255));
        jTF_lastName.setForeground(new java.awt.Color(204, 204, 204)); // grey/default
    } // end method reset_jTF_lasttName

    private void showErrorMessage(Exception e) {
        jL_dbMessages.setText("System: Error Occurred. Hover for details.");
        jL_dbMessages.setForeground(new java.awt.Color(255, 0, 0)); // red/error
        jL_dbMessages.setToolTipText(e.getMessage());
    } // end method showErrorMessage

    private void fetchInstructorsData() {
        try {
            String message = controller.getInstructors(jL_dbMessages);
            jTA_dbMessages.setText(message);
        } catch (SQLException e) {
            showErrorMessage(e);
        } catch (Exception e) {
            showErrorMessage(e);
        } // end catch
    }

    private void updateListingInstructtors() {
        String sortType = (String) jCB_sort.getSelectedItem();

        switch (sortType) {
        case "Last Name":
            if (!jCBreversSort.isSelected()) {
                DB.SELECT_INSTRUCTORS = "SELECT * FROM collegedb.instructors ORDER BY last_name;";
            } else {
                DB.SELECT_INSTRUCTORS = "SELECT * FROM collegedb.instructors ORDER BY last_name DESC;";
            }
            break;
        case "ID":
            if (!jCBreversSort.isSelected()) {
                DB.SELECT_INSTRUCTORS = "SELECT * FROM collegedb.instructors ORDER BY id;";
            } else {
                DB.SELECT_INSTRUCTORS = "SELECT * FROM collegedb.instructors ORDER BY id DESC;";
            }
            break;
        case "First Name":
            if (!jCBreversSort.isSelected()) {
                DB.SELECT_INSTRUCTORS = "SELECT * FROM collegedb.instructors ORDER BY first_name;";
            } else {
                DB.SELECT_INSTRUCTORS = "SELECT * FROM collegedb.instructors ORDER BY first_name DESC;";
            }
            break;
        }

        fetchInstructorsData();
    }
}
